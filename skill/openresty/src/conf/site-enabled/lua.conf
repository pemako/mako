server {
    listen 1021;
    location / {
        default_type text/html;
        content_by_lua_block {
            ngx.say("<p>Hello, World</p>")
        }
    }

    location /v1 {
        content_by_lua '
            local cjson = require "cjson"
            local jwt = require "resty.jwt"

            local jwt_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9" ..
            ".eyJmb28iOiJiYXIifQ" ..
            ".VAoRL1IU0nOguxURF2ZcKR0SGKE1gCbqwyh8u2MLAyY"
            local jwt_obj = jwt:verify("lua-resty-jwt", jwt_token)
            ngx.say(cjson.encode(jwt_obj))
        ';
    }

    location /sign {
        content_by_lua '
            local cjson = require "cjson"
            local jwt = require "resty.jwt"

            local jwt_token = jwt:sign(
                    "lua-resty-jwt",
                    {
                    header={typ="JWT", alg="HS256"},
                    payload={foo="bar"}
                    }
                    )
            ngx.say(jwt_token)
        ';
    }

    location /uuid {
        # 默认缓存lua代码，每次改动都必须重新reload，开发调试阶段可以关闭缓存
        # 当lua脚本修改后不需要重新reload nginx
        lua_code_cache on;
        set_by_lua_file $uuid /Users/mako/Work/nginx/conf/lua/uuid.lua;
        echo $uuid;
    }

    location ~ /lua-request/(\d+)/(\d+) {
        lua_code_cache on;
        set $a $1;
        set $b $host;
        content_by_lua_file /Users/mako/Work/nginx/conf/lua/test_request.lua;
        echo_after_body "ngx.var.b $b";
    }

    location /lua-response {
		content_by_lua_file /Users/mako/Work/nginx/conf/lua/test_response.lua;
    }

    location /lua-mysql {
        lua_code_cache on;
        content_by_lua_file /Users/mako/Work/nginx/conf/lua/test_mysql.lua;
    }

    location /lua-http {
        lua_code_cache on;
        content_by_lua_file /Users/mako/Work/nginx/conf/lua/test_http_1.lua;
    }

    resolver 114.114.114.114;

    location = /baidu {
        internal;
        proxy_pass http://www.baidu.com/s?wd=$arg_query;
    }

    location = /test { 
        content_by_lua '
            local res =
                ngx.location.capture("/baidu", { args = { query = "openresty" }})
            if res.status ~= 200 then
                ngx.say("failed to query baidu: ", res.status, ": ", res.body)
                return
            end
            ngx.say(res.body)
        ';
    }

    location = /sso { 
        lua_code_cache on;
        content_by_lua_file /Users/mako/Work/nginx/conf/lua/http_request.lua;
    }
}

